<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd">
    <!-- 打开spring的anotation支持 -->
    <context:annotation-config />
    <!--spring去那些包中找anotation-->
    <context:component-scan base-package="zttc.itat" />
    <!-- 导入资源文件 -->
    <context:property-placeholder location="classpath:jdbc.properties" />
    <!-- 配置dbcp连接池;也可以配置另一种方式：c3p0 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="initialSize" value="1" />
        <!--连接池的最大值-->
        <property name="maxActive" value="100" />
        <!--当最小空闲时，连接少于minIdle，会自动去申请一些连接-->
        <property name="minIdle" value="1"/>
        <!--高峰时期，连接池所能分配的最大空闲连接数，高峰期过了连接池可以将一些闲置的连接释放掉，一直较少到minIdle-->
        <property name="maxIdle" value="20"/>
        <property name="maxWait" value="1000"/>
    </bean>


    <!--创建spring的sessionFactory工厂,如果使用anotation方式，则不能使用LocalSessionFactoryBean-->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <!--注入数据源-->
        <property name="dataSource"><ref bean="dataSource"/></property>
        <!--设置spring在哪个包中查找相应的实体类-->
        <property name="packagesToScan">
            <value>zttc.itat.model</value>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.format_sql">false</prop>
            </props>
        </property>
    </bean>

    <!--开启hibernateTemplate并为其注入SessionFactory，使用HibernateTemplate不方便的是获取session需要通过getSessionFactory()方法-->
    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
            <property name="sessionFactory" ref="sessionFactory" />
    </bean>


    <!-- 配置Spring的声明式事务 -->
    <!-- 1.配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>

    <!-- spring通过AOP来进行事务管理-->
    <aop:config>
        <!--设置pointcut标识那些方法需要加入事务-->
        <!--以下事务是声明在dao中，但通常都会在service来处理多个业务对象的逻辑关系，诸如删除更新等....就会导致数据不完整，所以事务不应该在dao层处理。而应该在service层-->
        <aop:pointcut id="allMethods" expression="execution(* zttc.itat.service.*.*(..))" />
        <!--通过advisor来控制具体加入事务的方法-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="allMethods"/>
    </aop:config>

    <!-- 2.配置事务属性,需要事务管理器 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--让所有方法都加入事务管理，为了提高效率，可以吧一些查询之类的方法设置为只读事务-->
            <tx:method name="*" propagation="REQUIRED" read-only="true"/>
            <!--以下方法都是可能涉及修改的方法，就不可设置为只读-->
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="del*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="save*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>
</beans>