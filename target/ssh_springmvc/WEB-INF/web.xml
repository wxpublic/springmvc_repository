<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
  <!--
      该元素用来声明应用范围(整个WEB项目)内的上下文初始化参数 ，这里是加载spring的配置文件
      context-param 可以有多个，这里只介绍contextConfigLocation，作用是加载spring的配置文件
      这里我曾经遇到一个坑，这里说出来告诉大家。
          大家先看<servlet>内有个<init-param>里面也有一个<param-name>contextConfigLocation</param-name>配置
          于是我自作聪明把最外层的<context-param>删除，只保留<servlet><init-param>内的配置，结果运行时候报错说找不到classpath:demo-servlet.xml
          文件，此时系统会自动去找/WEB-INI/applicationContext.xml文件，此时文件是不存在的所以也报错。
          切记：如果要用classpath方式去定位配置文件，文件路径在最外层的配置一定要有，仅仅只写servlet内的配置是无法找到的。如果最外层不想写
          只在servlet标签内定位spring配置文件，只能用/WEB-INI/文件名.xml这样的方式。

      这里可以看到我们有两个Spring 配置文件，一个是<context-param>里的<param-value>classpath:demo-root-serlvet.xml</param-value>
      一个是<servlet><init-param>内的<param-value>classpath:demo-servlet.xml</param-value>，这样的目的是为了将配置文件分开，不同的配置放到不同的
      文件里，例如：数据库配置可以放到单独文件，AOP配置可以放到单独文件里。demo-root-serlvet.xml里面可能包含了其他配置文件，这里我们仅仅作为演示，暂时为空。
  -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <!--
        配置路径方式有两种，一种是将文件放到WEB-INF目录下 parm-value的值为/WEB-INF/文件名.xml,另外一种是用classpath:文件名.xml
        文件放到/src/main/resources/下
    -->
    <param-value>classpath:applicationContext.xml</param-value>
  </context-param>

  <!-- character -->
  <filter>
    <filter-name>characterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>

  <context-param>
    <param-name>log4jExposeWebAppRoot</param-name>
    <param-value>false</param-value>
  </context-param>

  <filter-mapping>
    <filter-name>characterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!-- spring mvc -->
  <servlet>
    <servlet-name>gameLiveServlet</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:springmvc-servlet.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>

  <servlet-mapping>
    <servlet-name>gameLiveServlet</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>

  <filter>
    <filter-name>sitemesh</filter-name>
    <filter-class>com.opensymphony.sitemesh.webapp.SiteMeshFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>sitemesh</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!--spring提供了下面这个类来实现openSessionViewer的操作-->
  <filter>
    <filter-name>openSessionInViewFilter</filter-name>
    <filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>openSessionInViewFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <filter>
    <filter-name>SystemContextFilter</filter-name>
    <filter-class>zttc.itat.web.SystemContextFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>SystemContextFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!--手动编写过滤器，控制用户登录-->
  <filter>
    <filter-name>LoginFilter</filter-name>
    <filter-class>zttc.itat.web.LoginFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>LoginFilter</filter-name>
    <url-pattern>/user/*</url-pattern>
  </filter-mapping>

  <listener>
    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
</web-app>